$spacer: 1em !default;
$spacers: (
	0: 0,
	1: .5em,
	2: 1em,
	3: 1.5em,
	4: 2em,
	5: 2.5em,
	6: 3em,
	7: 3.5em,
	8: 4em,
) !default;

@mixin generate-utilities($utilities) {
	@each $utility, $config in $utilities {
		$values: map-get($config, values);

		// If the values are a list or string, convert it into a map
		@if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
			$values: zip($values, $values);
		}

		@each $key, $value in $values {
			$properties: map-get($config, property);
			// Multiple properties are possible, for example with vertical or horizontal margins or paddings
			@if type-of($properties) == "string" {
				$properties: append((), $properties);
			}

			$class: if(map-has-key($config, class), map-get($config, class), nth($properties, 1));
			$class: if($class == null, "", $class);

			// State params to generate pseudo-classes
			$state: if(map-has-key($config, state), map-get($config, state), ());

			// Don't prefix if value key is null (eg. with shadow class)
			$modifier: if($key, if($class == "", "", "-") + $key, "");

			@if $value != null {

				// Generate utility classes
				.#{ $class}#{ $modifier} {
					@each $property in $properties {
						#{$property}: $value;
					}
				}

				// Generate pseudo-classes
				@each $pseudo in $state {
					.#{ $class}#{ $modifier}-#{$pseudo}:#{$pseudo} {
						@each $property in $properties {
							#{$property}: $value;
						}
					}
				}
			}
		}
	}
}
